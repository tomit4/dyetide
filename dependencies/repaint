#!/usr/bin/env bash

error() {
    printf "error: %s\n" "$1" 1>&2
    exit 2
}

alpha_to_hex() {
    printf "%02x\n" "$(echo "scale=0; $1*255" | bc)" 2>/dev/null
}

hex_to_rgb() {
    local a
    : "${1/\#/}"
    if ((${#_} == 8)); then
        ((r = 16#${_:0:2}, g = 16#${_:2:2}, b = 16#${_:4:2}, a = 16#${_:6:2}))
        a=$(echo "scale=2; $a / 255" | bc)
    elif ((${#_} == 6)); then
        ((r = 16#${_:0:2}, g = 16#${_:2:2}, b = 16#${_:4:2}))
        a=1.0
    elif ((${#_} == 3)); then

        r="$(echo "$1" | cut -c2)"
        g="$(echo "$1" | cut -c3)"
        b="$(echo "$1" | cut -c4)"

        r=$(printf "%d" 0x$r$r)
        g=$(printf "%d" 0x$g$g)
        b=$(printf "%d" 0x$b$b)
        a=1.0
    else
        error "$1 is not a recognized hex color code."
    fi
    printf "%s\n" "rgba($r, $g, $b, $a)"
}

# parse_rgb() takes rgb string to pass to rgb_to_hex()
parse_rgb() {
    local regex='^\s?rgb[a]?[(][0-9]{1,3}, [0-9]{1,3}, [0-9]{1,3}[)]$|^rgb[a]?[(][0-9]{1,3}, [0-9]{1,3}, [0-9]{1,3}, [0-1]?.[0-9][0-9]?[)]\s?$'
    if [[ $2 =~ $regex ]]; then
        local numbers
        numbers=$(echo "$2" | sed -n 's/.*\(([^()]*)\).*/\1/p' | sed 's/[()]//g' | sed 's/,\s/ /g')
        read -r -a rgb <<< "$numbers"
        rgb_to_hex  "${rgb[$"0"]}" "${rgb[$"1"]}" "${rgb[$"2"]}" "${rgb[$"3"]}"
    else
        error "$2 pattern passed is not valid rgba format" 2
    fi
}

rgb_to_hex() {
    local a

    if [[ -n "$4" ]]; then
        a=$(alpha_to_hex "$4")
        printf "#%02x%02x%02x%s\n" "$1" "$2" "$3" "$a"
    else
        printf "#%02x%02x%02x\n" "$1" "$2" "$3"
    fi
}

main() {
    [[ "$#" -lt 1 ]] && printhelp

    while getopts ":x:r:?" arg; do
        case $arg in
            x)
                if [[ "$#" -gt 2 ]]; then
                    error "-x only parses one following argument"
                fi
                local rgbval
                rgbval=$(hex_to_rgb "${2:-''}")
                printf "%s\n" "$rgbval"
                ;;
            r)
                local hexval
                if [[ "$#" -eq 2 ]]; then
                    hexval=$(parse_rgb "$@")
                    printf "%s\n" "$hexval"
                else
                    hexval=$(rgb_to_hex "${@:2}")
                    printf "%s\n" "$hexval"
                fi
                ;;
            ?)
                error "passed flag not recognized"
                ;;
        esac
    done
}

main "$@"
